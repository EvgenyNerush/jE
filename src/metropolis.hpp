/**
 * @file
 * @brief Abstract <a href =
 * "https://en.wikipedia.org/wiki/Metropolis%E2%80%93Hastings_algorithm">Metropolis algorithm</a>
 * for symmetric proposal distribution.
*/

#include <vector>
#include <tuple>
#include <functional>

/**
 * A std::vector of random points distributed accordingly to the @p target_distribution.
 * @param rng  RNG            used to accept/decline new points
 * @param seed                seed  for @p rng
 * @param cast_to_01          function to convert values generated by @p rng to doubles evenly
 *                            distributed in (0, 1)
 * @param proposal_density    proposal distribution function (jumping distribution) which updates
 *                            the point and state of its own RNG
 * @param rx0                 the pair (seed for RNG of @p proposal_density, initial point for it)
 * @param target_distribution distribution to generate
 * @param n                   number of points to generate
 */
template<typename X, typename R, typename T>
std::vector<X> metropolis ( void                     rng(R&)
                          , R                        seed
                          , double                   cast_to_01(R)
                          , std::function
                            <void(std::pair<T, X>&)> proposal_density
                          , std::pair<T, X>          rx0
                          , std::function<double(X)> target_distribution
                          , size_t                   n
                          ) { 
    std::vector<X> x(n);
    x[0] = rx0.second;
    std::pair<T, X> rx = rx0;
    R s = seed;
    for (size_t i = 1; i < n; ++i) {
        proposal_density(rx);
        double acceptance = target_distribution(rx.second) / target_distribution(x[i - 1]);
        if (acceptance < 1) {
            rng(s);
            if (cast_to_01(s) >= acceptance) {
                rx.second = x[i - 1];
            }
        }
        x[i] = rx.second;
    }
    return x;
}
